import{_ as n,r as t,o as s,c as i,a as e,b as l,d as o}from"./app-CufAr4C6.js";const a={},_=e("h1",{id:"mit-6-s081-操作系统-课程导读和源码浅析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mit-6-s081-操作系统-课程导读和源码浅析"},[e("span",null,"MIT 6.S081 操作系统 课程导读和源码浅析")])],-1),c=e("blockquote",null,[e("p",null,"这部分均以视频形式来讲解，发布在BiliBili当中，就不出文字博客了")],-1),d=e("blockquote",null,[e("p",null,"叠个甲：我做视频和博客的初衷是为了类似想开源代码一样开源我的知识。如果我有什么不对的地方，望大家多多包涵，如果能帮我指正或扩充，我将感激不尽。")],-1),p=e("p",null,"我将其分为两大块: 课程导读、源码浅析。",-1),u=e("h3",{id:"课程导读",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#课程导读"},[e("span",null,"课程导读")])],-1),f=e("p",null,"对应的lecture共有15讲，我人为将其分为10讲",-1),b=e("strong",null,"overview",-1),h=e("br",null,null,-1),m=e("br",null,null,-1),g={href:"https://www.bilibili.com/video/BV1ku4m1P77U/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.bilibili.com/video/BV1N2421T7nM/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},v=e("strong",null,"page table",-1),k=e("br",null,null,-1),B=e("strong",null,"page table",-1),V={href:"https://www.bilibili.com/video/BV1N2421T7nM/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},y=e("strong",null,"GDB",-1),S=e("strong",null,"RISC-V",-1),x=e("br",null,null,-1),I={href:"https://www.bilibili.com/video/BV1Pm411D7Pt/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},P=e("strong",null,"trap",-1),C=e("br",null,null,-1),L={href:"https://www.bilibili.com/video/BV1rv421y7ta/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},D=e("strong",null,"page fault",-1),T=e("br",null,null,-1),q=e("strong",null,"Lazy Allocation",-1),M=e("strong",null,"Zero Fill on Demand",-1),N=e("strong",null,"Copy On Write Fork",-1),O={href:"https://www.bilibili.com/video/BV16u4m1P7c3/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},E=e("strong",null,"interrupt",-1),J=e("br",null,null,-1),R=e("strong",null,"trap",-1),U=e("strong",null,"interrupt",-1),X=e("br",null,null,-1),A={href:"https://www.bilibili.com/video/BV1pW421N7Eh/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},G=e("strong",null,"lock",-1),W=e("br",null,null,-1),F=e("strong",null,"Dead Lock",-1),H=e("strong",null,"Spin Lock",-1),z=e("strong",null,"Mutex Lock",-1),Z=e("strong",null,"Blocking Lock",-1),Q=e("br",null,null,-1),j={href:"https://www.bilibili.com/video/BV1pH4y1J7rB/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},K=e("br",null,null,-1),Y=e("code",null,"sched() scheduling()",-1),$=e("br",null,null,-1),ee={href:"https://www.bilibili.com/video/BV1Em411S7Tm/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},le=e("strong",null,"file system",-1),re=e("br",null,null,-1),oe=e("br",null,null,-1),ne={href:"https://www.bilibili.com/video/BV1yy421q7JS/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},te=e("strong",null,"summary",-1),se=e("br",null,null,-1),ie=e("br",null,null,-1),ae={href:"https://www.bilibili.com/video/BV1hJ4m1e7fx/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},_e=e("h3",{id:"源码浅析",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#源码浅析"},[e("span",null,"源码浅析")])],-1),ce=e("blockquote",null,[e("p",null,"这里所说的源码，指的是XV6的源码")],-1),de={href:"https://www.bilibili.com/video/BV1fC4114799/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://www.bilibili.com/video/BV1fS421P7Hq/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://www.bilibili.com/video/BV1QW421A79S/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"},fe={href:"https://www.bilibili.com/video/BV14r421H7wA/?spm_id_from=333.999.0.0&vd_source=f53099189814dd887f4ab25638e07406",target:"_blank",rel:"noopener noreferrer"};function be(he,me){const r=t("ExternalLinkIcon");return s(),i("div",null,[_,c,d,p,u,f,e("ol",null,[e("li",null,[e("p",null,[b,l(" 总述概览 前置知识:"),h,l(" 这部分内容对应官方发布的lecture1-3，涉及一些计算机科学的基础知识，是为了激发大家的兴趣而设计，故速览即可。这是我首次尝试制作视频，讲得有些紧张，请见谅。"),m,l(" 这个是第一版做的"),e("a",g,[l("overview"),o(r)]),l("，也是我第一次做视频，讲的比较紧张。这个是我的"),e("a",w,[l("重制版"),o(r)]),l("。")])]),e("li",null,[e("p",null,[v,l(" 内存虚拟化与页表的原理及实现:"),k,l(" 对应lecture4。我们知道操作系统的作用在于对硬件进行抽象，而"),B,l("正是这种抽象的一部分，它是内存虚拟化中最重要且最强大的机制之一。 "),e("a",V,[l("lec4 page table页表和内存虚拟化"),o(r)])])]),e("li",null,[e("p",null,[y,l("和"),S,l("的基本知识和小技巧:"),x,l(" 对应lecture5。详解如何使用GDB去调试XV6，包括常用的调试命令到如何对用户态的XV6文件进行调试；以及RISC-V的基本概念和32个通用寄存器，加上call convention即调用约定的介绍。 "),e("a",I,[l("lec5 GDB调试和RISC-V寄存器的调用协定"),o(r)])])]),e("li",null,[e("p",null,[P,l("和system call:"),C,l(" 对应lecture6。涵盖lecture6。trap机制涉及对进程的操作，而进程是对CPU功能的一种抽象。system call即系统调用，可类比为操作系统提供给用户的API，让我们得以在内核级别进行操作。system call的过程，即用户态到内核态的切换，就是通过trap机制来完成的。 "),e("a",L,[l("lec6 trap陷阱机制 走进system call的前世今生"),o(r)])])]),e("li",null,[e("p",null,[D,l("和三种机制:"),T,l(" 对应lecture7。在查询页表时遇到的失败被称为page fault。但这种失败同时也为我们带来了新的转机，由此衍生出三大机制："),q,l("*, "),M,l(", "),N,l("。尽管在XV6中这些机制未得到实现（只会简单报告page fault），但在现代Linux系统中，它们都得以完整实施。 "),e("a",O,[l("lec7: page fault和应运而生的三种机制 懒惰分配，按需填零，写时拷贝"),o(r)])])]),e("li",null,[e("p",null,[E,l(" 中断与外部设备的I/O的互动:"),J,l(" 对应lecture9。探讨了中断机制的内涵，中断不同于同步的"),R,l("——源自计算机内部，"),U,l("是由外部设备发起的异步行为，用来响应硬件事件，促进CPU与外设的有效沟通。"),X,e("a",A,[l("lec9: interrupt中断与外部设备的IO 换一个视角看trap"),o(r)])])]),e("li",null,[e("p",null,[G,l(" 锁机制:"),W,l(" 对应lecture10。锁机制是并发编程的基石，旨在管理多个进程对同一资源的并发访问。本讲介绍了包括"),F,l("（一种进程间因资源竞争产生的相互等待状态），"),H,l("，"),z,l("，和"),Z,l("在内的多个关键概念。"),Q,e("a",j,[l("lec10: lock 死锁 自旋锁 互斥锁 阻塞锁"),o(r)])])]),e("li",null,[e("p",null,[l("进程的切换与调度:"),K,l(" 对应lecture11-12。进程切换与调度是操作系统中不可或缺的一环，它关乎资源分配的效率及公平性。主要围绕着"),Y,l("这几个函数来展开讲述。但是这部分是我学的不扎实的地方，有很多知识点需要我们去通过实际的做多线程、协程类的项目才能弄懂的，我现在对这方面很欠缺，所以视频完完全全就图一乐。"),$,e("a",ee,[l("lec11-12: 调度和进程切换"),o(r)])])]),e("li",null,[e("p",null,[le,l(" 文件系统相关内容:"),re,l(" 对应lecture13-15。围绕文件系统的整体构架进行大概的解读，尤其强调日志机制在系统崩溃恢复中的核心作用。"),oe,e("a",ne,[l("lec13-15: file system和crash recovery"),o(r)])])]),e("li",null,[e("p",null,[te,l(" 课程总结和复盘:"),se,l(" 是我自己个人对于MIT的操作系统，也就是6.S081这门课程学到了什么，做了一个小小的总结。也是我对大学到目前为止的一个的回顾，再小小地对之后的打算进行一下畅想与展望。"),ie,e("a",ae,[l("summay 复盘 回顾与展望"),o(r)])])])]),_e,ce,e("ol",null,[e("li",null,[e("p",null,[e("a",de,[l("xv6源码解析1 startup 关于xv6是如何开机到运行程序的"),o(r)])])]),e("li",null,[e("p",null,[e("a",pe,[l("xv6源码解析2 memory virtualization 内存虚拟化 页表 虚拟内存"),o(r)])])]),e("li",null,[e("p",null,[e("a",ue,[l("xv6源码解析3 process mangement 进程结构和多进程调度"),o(r)])])]),e("li",null,[e("p",null,[e("a",fe,[l("xv6源码解析4 syscall walkthru 从代码的视角过一遍systemc all"),o(r)])])])])])}const we=n(a,[["render",be],["__file","6s081_overview.html.vue"]]),ve=JSON.parse('{"path":"/posts/6s081_overview.html","title":"MIT 6.S081 操作系统 课程导读和源码浅析","lang":"en-US","frontmatter":{"category":["6.S081"],"tag":["Operating System"]},"headers":[{"level":3,"title":"课程导读","slug":"课程导读","link":"#课程导读","children":[]},{"level":3,"title":"源码浅析","slug":"源码浅析","link":"#源码浅析","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"posts/6s081_overview.md","excerpt":"\\n<blockquote>\\n<p>这部分均以视频形式来讲解，发布在BiliBili当中，就不出文字博客了</p>\\n</blockquote>\\n<blockquote>\\n<p>叠个甲：我做视频和博客的初衷是为了类似想开源代码一样开源我的知识。如果我有什么不对的地方，望大家多多包涵，如果能帮我指正或扩充，我将感激不尽。</p>\\n</blockquote>\\n<p>我将其分为两大块: 课程导读、源码浅析。</p>\\n<h3>课程导读</h3>\\n<p>对应的lecture共有15讲，我人为将其分为10讲</p>\\n<ol>\\n<li>\\n<p><strong>overview</strong> 总述概览 前置知识:<br>\\n这部分内容对应官方发布的lecture1-3，涉及一些计算机科学的基础知识，是为了激发大家的兴趣而设计，故速览即可。这是我首次尝试制作视频，讲得有些紧张，请见谅。<br>\\n这个是第一版做的<a href=\\"https://www.bilibili.com/video/BV1ku4m1P77U/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">overview</a>，也是我第一次做视频，讲的比较紧张。这个是我的<a href=\\"https://www.bilibili.com/video/BV1N2421T7nM/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">重制版</a>。</p>\\n</li>\\n<li>\\n<p><strong>page table</strong> 内存虚拟化与页表的原理及实现:<br>\\n对应lecture4。我们知道操作系统的作用在于对硬件进行抽象，而<strong>page table</strong>正是这种抽象的一部分，它是内存虚拟化中最重要且最强大的机制之一。\\n<a href=\\"https://www.bilibili.com/video/BV1N2421T7nM/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec4 page table页表和内存虚拟化</a></p>\\n</li>\\n<li>\\n<p><strong>GDB</strong>和<strong>RISC-V</strong>的基本知识和小技巧:<br>\\n对应lecture5。详解如何使用GDB去调试XV6，包括常用的调试命令到如何对用户态的XV6文件进行调试；以及RISC-V的基本概念和32个通用寄存器，加上call convention即调用约定的介绍。\\n<a href=\\"https://www.bilibili.com/video/BV1Pm411D7Pt/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec5 GDB调试和RISC-V寄存器的调用协定</a></p>\\n</li>\\n<li>\\n<p><strong>trap</strong>和system call:<br>\\n对应lecture6。涵盖lecture6。trap机制涉及对进程的操作，而进程是对CPU功能的一种抽象。system call即系统调用，可类比为操作系统提供给用户的API，让我们得以在内核级别进行操作。system call的过程，即用户态到内核态的切换，就是通过trap机制来完成的。\\n<a href=\\"https://www.bilibili.com/video/BV1rv421y7ta/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec6 trap陷阱机制 走进system call的前世今生</a></p>\\n</li>\\n<li>\\n<p><strong>page fault</strong>和三种机制:<br>\\n对应lecture7。在查询页表时遇到的失败被称为page fault。但这种失败同时也为我们带来了新的转机，由此衍生出三大机制：<strong>Lazy Allocation</strong>*, <strong>Zero Fill on Demand</strong>, <strong>Copy On Write Fork</strong>。尽管在XV6中这些机制未得到实现（只会简单报告page fault），但在现代Linux系统中，它们都得以完整实施。\\n<a href=\\"https://www.bilibili.com/video/BV16u4m1P7c3/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec7: page fault和应运而生的三种机制 懒惰分配，按需填零，写时拷贝</a></p>\\n</li>\\n<li>\\n<p><strong>interrupt</strong> 中断与外部设备的I/O的互动:<br>\\n对应lecture9。探讨了中断机制的内涵，中断不同于同步的<strong>trap</strong>——源自计算机内部，<strong>interrupt</strong>是由外部设备发起的异步行为，用来响应硬件事件，促进CPU与外设的有效沟通。<br>\\n<a href=\\"https://www.bilibili.com/video/BV1pW421N7Eh/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec9: interrupt中断与外部设备的IO 换一个视角看trap</a></p>\\n</li>\\n<li>\\n<p><strong>lock</strong> 锁机制:<br>\\n对应lecture10。锁机制是并发编程的基石，旨在管理多个进程对同一资源的并发访问。本讲介绍了包括<strong>Dead Lock</strong>（一种进程间因资源竞争产生的相互等待状态），<strong>Spin Lock</strong>，<strong>Mutex Lock</strong>，和<strong>Blocking Lock</strong>在内的多个关键概念。<br>\\n<a href=\\"https://www.bilibili.com/video/BV1pH4y1J7rB/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec10: lock 死锁 自旋锁 互斥锁 阻塞锁</a></p>\\n</li>\\n<li>\\n<p>进程的切换与调度:<br>\\n对应lecture11-12。进程切换与调度是操作系统中不可或缺的一环，它关乎资源分配的效率及公平性。主要围绕着<code>sched() scheduling()</code>这几个函数来展开讲述。但是这部分是我学的不扎实的地方，有很多知识点需要我们去通过实际的做多线程、协程类的项目才能弄懂的，我现在对这方面很欠缺，所以视频完完全全就图一乐。<br>\\n<a href=\\"https://www.bilibili.com/video/BV1Em411S7Tm/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec11-12: 调度和进程切换</a></p>\\n</li>\\n<li>\\n<p><strong>file system</strong> 文件系统相关内容:<br>\\n对应lecture13-15。围绕文件系统的整体构架进行大概的解读，尤其强调日志机制在系统崩溃恢复中的核心作用。<br>\\n<a href=\\"https://www.bilibili.com/video/BV1yy421q7JS/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">lec13-15: file system和crash recovery</a></p>\\n</li>\\n<li>\\n<p><strong>summary</strong> 课程总结和复盘:<br>\\n是我自己个人对于MIT的操作系统，也就是6.S081这门课程学到了什么，做了一个小小的总结。也是我对大学到目前为止的一个的回顾，再小小地对之后的打算进行一下畅想与展望。<br>\\n<a href=\\"https://www.bilibili.com/video/BV1hJ4m1e7fx/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">summay 复盘 回顾与展望</a></p>\\n</li>\\n</ol>"}');export{we as comp,ve as data};
