import{_ as n,o as s,c as a,e}from"./app-Be7KFTk8.js";const t="/home/assets/cs144_lab2_3nums-D835SYwo.png",p="/home/assets/cs144_lab2_num_trans-FcNOP6c6.png",c={},o=e(`<h1 id="stanford-cs144-lab-2" tabindex="-1"><a class="header-anchor" href="#stanford-cs144-lab-2"><span>Stanford CS144 lab 2</span></a></h1><p>这个lab分为两个部分——wrap和unwrap，TCP receiver的实现<br> 回顾lab0和lab1，它们其实都是一个造积木的过程，而到了lab2当中，当然wrap和unwrap也还是在造积木。但到了TCPreceiver则开始搭积木了，它将之前我们所创建的几个小Class，通过调用其中的几个API给组合在了一起</p><h3 id="wrap和unwrap的实现" tabindex="-1"><a class="header-anchor" href="#wrap和unwrap的实现"><span>wrap和unwrap的实现</span></a></h3><ul><li>解释</li></ul><p>先来讲讲这两个函数的实现，而在这之前先让我们了解一下这三个概念</p><p>我先来自己解释一波:</p><ol><li>seqno(Sequence Numbers): 类型为Wrap32，实际里面的组成其实就是32位的一个数(如下)，能从32位的任何数(ISN)开始<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Wrap32</span> <span class="token punctuation">{</span>
    <span class="token keyword">uint32_t</span> raw_number <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>abs seqno(Absolute Sequence Numbers): 类型是uint64_t，这个就是一个64位的数，始于0</li><li>stream index(Stream indices): 类型是uint64_t，其实就是我们之前reassembler里面的那个index</li></ol><p>(这个是CS144官方文档当中的解释) <img src="`+t+'" alt="3 numbers"></p><ul><li>转换</li></ul><p><strong>也就是说我们要把64位的一个数映射到32位数当中</strong></p><p>这个wrap让我们实现的其实就是这样一个转换: seqno → seqno<br> 而unwrap就是这样的: seqno → absolute seqno</p><blockquote><p><strong>最核心的一点</strong>: <code>(zero_point + absolute_seqno) % (1 &lt;&lt; 32) = seqno</code></p></blockquote><p>自然而然想出的办法就是<strong>取模</strong>运算</p><p>(这个图是官方文档给出的这三者之间的相互转换关系) <img src="'+p+`" alt="3 number transition"></p><ul><li>实现</li></ul><p>我这里采用的是位运算式的取模运算<br> wrap比较简单，而unwrap除了直接取模，还存在着两个fringe case...</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Wrap32 <span class="token class-name">Wrap32</span><span class="token double-colon punctuation">::</span><span class="token function">wrap</span><span class="token punctuation">(</span> <span class="token keyword">uint64_t</span> n<span class="token punctuation">,</span> Wrap32 zero_point <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Convert absolute seqno → seqno. </span>
  <span class="token comment">// Given an absolute sequence number (n) and an Initial Sequence Number (zero point), produce the sequence number for n.</span>
  <span class="token keyword">const</span> <span class="token keyword">uint32_t</span> mask <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>zero_point <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint32_t</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">uint64_t</span> <span class="token class-name">Wrap32</span><span class="token double-colon punctuation">::</span><span class="token function">unwrap</span><span class="token punctuation">(</span> Wrap32 zero_point<span class="token punctuation">,</span> <span class="token keyword">uint64_t</span> checkpoint <span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Convert seqno → absolute seqno. </span>
  <span class="token comment">// Given a sequence number (raw_value_), the Initial Sequence Number (zero point), and an absolute checkpoint sequence number,</span>
  <span class="token comment">// find the corresponding absolute sequence number that is closest to the checkpoint.</span>
  <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> low32_mask <span class="token operator">=</span> <span class="token number">0x0000&#39;0000&#39;FFFF&#39;FFFF</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">uint64_t</span> high32_mask <span class="token operator">=</span> <span class="token number">0xFFFF&#39;FFFF&#39;0000&#39;0000</span><span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> low32_ab_seqno <span class="token operator">=</span> raw_value_ <span class="token operator">-</span> zero_point<span class="token punctuation">.</span>raw_value_<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> low32_checkpoint <span class="token operator">=</span> checkpoint <span class="token operator">&amp;</span> low32_mask<span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> high32_checkpoint <span class="token operator">=</span> checkpoint <span class="token operator">&amp;</span> high32_mask<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>high32_checkpoint <span class="token operator">&amp;&amp;</span> low32_ab_seqno <span class="token operator">&gt;</span> low32_checkpoint <span class="token operator">&amp;&amp;</span> low32_ab_seqno <span class="token operator">-</span> low32_checkpoint <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// last loop is closer</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>high32_checkpoint <span class="token operator">|</span> low32_ab_seqno<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>high32_checkpoint <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> high32_mask <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token generic-function"><span class="token function">low32_ab_seqno</span> <span class="token generic class-name"><span class="token operator">&lt;</span> low32_checkpoint <span class="token operator">&amp;&amp;</span> low32_checkpoint <span class="token operator">-</span> low32_ab_seqno <span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// next loop is closer</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>high32_checkpoint <span class="token operator">|</span> low32_ab_seqno<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> high32_checkpoint <span class="token operator">|</span> low32_ab_seqno<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tcp-receiver" tabindex="-1"><a class="header-anchor" href="#tcp-receiver"><span>TCP receiver</span></a></h3><p>将我们前面所实现的三块积木——byte stream, reassembler, (un)wrap，给搭建在一起的过程<br> (很多老哥说这个lab的前半部分难，但个人做到receiver的时候感觉更懵逼一点，就是你不知道它要干嘛)<br> 奇奇怪怪的，直接上代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;tcp_receiver.hh&quot;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">TCPReceiver</span><span class="token double-colon punctuation">::</span><span class="token function">receive</span><span class="token punctuation">(</span> TCPSenderMessage message <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Your code here.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>RST<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zero_point_<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>message<span class="token punctuation">.</span>SYN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// we do nothing utill S bit is set</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    zero_point_<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>seqno<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">uint64_t</span> check_point <span class="token operator">=</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bytes_pushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> abs_seqno <span class="token operator">=</span> message<span class="token punctuation">.</span>seqno<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span>zero_point_<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> check_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint64_t</span> stream_index<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>SYN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    stream_index <span class="token operator">=</span> abs_seqno <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  reassembler_<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>stream_index<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>  message<span class="token punctuation">.</span>FIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

TCPReceiverMessage <span class="token class-name">TCPReceiver</span><span class="token double-colon punctuation">::</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
  <span class="token comment">// Your code here.</span>
  TCPReceiverMessage res<span class="token punctuation">;</span>
  res<span class="token punctuation">.</span>window_size <span class="token operator">=</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">available_capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> UINT16_MAX<span class="token operator">?</span> UINT16_MAX<span class="token operator">:</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint16_t</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">available_capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span>RST <span class="token operator">=</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zero_point_<span class="token punctuation">.</span><span class="token function">has_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>ackno <span class="token operator">=</span> nullopt<span class="token punctuation">;</span>

    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_closed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ackno = S bit + payload + F bit</span>
    res<span class="token punctuation">.</span>ackno <span class="token operator">=</span> <span class="token class-name">Wrap32</span><span class="token double-colon punctuation">::</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bytes_pushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> zero_point_<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>ackno <span class="token operator">=</span> <span class="token class-name">Wrap32</span><span class="token double-colon punctuation">::</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bytes_pushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> zero_point_<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试结果:</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>╰─❯ <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> check2
<span class="token punctuation">[</span> <span class="token number">35</span>%<span class="token punctuation">]</span> Built target util_debug
<span class="token punctuation">[</span> <span class="token number">35</span>%<span class="token punctuation">]</span> Building CXX object src/CMakeFiles/minnow_debug.dir/tcp_receiver.cc.o
<span class="token punctuation">[</span> <span class="token number">42</span>%<span class="token punctuation">]</span> Linking CXX static library libminnow_debug.a
<span class="token punctuation">[</span> <span class="token number">64</span>%<span class="token punctuation">]</span> Built target minnow_debug
<span class="token punctuation">[</span> <span class="token number">71</span>%<span class="token punctuation">]</span> Built target minnow_testing_debug
<span class="token punctuation">[</span> <span class="token number">78</span>%<span class="token punctuation">]</span> Built target stream_copy
<span class="token punctuation">[</span> <span class="token number">85</span>%<span class="token punctuation">]</span> Linking CXX executable webget
<span class="token punctuation">[</span> <span class="token number">92</span>%<span class="token punctuation">]</span> Built target webget
<span class="token punctuation">[</span> <span class="token number">92</span>%<span class="token punctuation">]</span> Linking CXX executable tcp_native
<span class="token punctuation">[</span><span class="token number">100</span>%<span class="token punctuation">]</span> Built target tcp_native
Test project /root/minnow/build
      Start  <span class="token number">1</span>: compile with bug-checkers
 <span class="token number">1</span>/29 Test  <span class="token comment">#1: compile with bug-checkers ........   Passed    1.82 sec</span>
      Start  <span class="token number">3</span>: byte_stream_basics
 <span class="token number">2</span>/29 Test  <span class="token comment">#3: byte_stream_basics ...............   Passed    0.02 sec</span>
      Start  <span class="token number">4</span>: byte_stream_capacity
 <span class="token number">3</span>/29 Test  <span class="token comment">#4: byte_stream_capacity .............   Passed    0.01 sec</span>
      Start  <span class="token number">5</span>: byte_stream_one_write
 <span class="token number">4</span>/29 Test  <span class="token comment">#5: byte_stream_one_write ............   Passed    0.01 sec</span>
      Start  <span class="token number">6</span>: byte_stream_two_writes
 <span class="token number">5</span>/29 Test  <span class="token comment">#6: byte_stream_two_writes ...........   Passed    0.01 sec</span>
      Start  <span class="token number">7</span>: byte_stream_many_writes
 <span class="token number">6</span>/29 Test  <span class="token comment">#7: byte_stream_many_writes ..........   Passed    0.04 sec</span>
      Start  <span class="token number">8</span>: byte_stream_stress_test
 <span class="token number">7</span>/29 Test  <span class="token comment">#8: byte_stream_stress_test ..........   Passed    0.02 sec</span>
      Start  <span class="token number">9</span>: reassembler_single
 <span class="token number">8</span>/29 Test  <span class="token comment">#9: reassembler_single ...............   Passed    0.01 sec</span>
      Start <span class="token number">10</span>: reassembler_cap
 <span class="token number">9</span>/29 Test <span class="token comment">#10: reassembler_cap ..................   Passed    0.01 sec</span>
      Start <span class="token number">11</span>: reassembler_seq
<span class="token number">10</span>/29 Test <span class="token comment">#11: reassembler_seq ..................   Passed    0.01 sec</span>
      Start <span class="token number">12</span>: reassembler_dup
<span class="token number">11</span>/29 Test <span class="token comment">#12: reassembler_dup ..................   Passed    0.03 sec</span>
      Start <span class="token number">13</span>: reassembler_holes
<span class="token number">12</span>/29 Test <span class="token comment">#13: reassembler_holes ................   Passed    0.01 sec</span>
      Start <span class="token number">14</span>: reassembler_overlapping
<span class="token number">13</span>/29 Test <span class="token comment">#14: reassembler_overlapping ..........   Passed    0.01 sec</span>
      Start <span class="token number">15</span>: reassembler_win
<span class="token number">14</span>/29 Test <span class="token comment">#15: reassembler_win ..................   Passed    0.20 sec</span>
      Start <span class="token number">16</span>: wrapping_integers_cmp
<span class="token number">15</span>/29 Test <span class="token comment">#16: wrapping_integers_cmp ............   Passed    0.01 sec</span>
      Start <span class="token number">17</span>: wrapping_integers_wrap
<span class="token number">16</span>/29 Test <span class="token comment">#17: wrapping_integers_wrap ...........   Passed    0.01 sec</span>
      Start <span class="token number">18</span>: wrapping_integers_unwrap
<span class="token number">17</span>/29 Test <span class="token comment">#18: wrapping_integers_unwrap .........   Passed    0.01 sec</span>
      Start <span class="token number">19</span>: wrapping_integers_roundtrip
<span class="token number">18</span>/29 Test <span class="token comment">#19: wrapping_integers_roundtrip ......   Passed    0.99 sec</span>
      Start <span class="token number">20</span>: wrapping_integers_extra
<span class="token number">19</span>/29 Test <span class="token comment">#20: wrapping_integers_extra ..........   Passed    0.21 sec</span>
      Start <span class="token number">21</span>: recv_connect
<span class="token number">20</span>/29 Test <span class="token comment">#21: recv_connect .....................   Passed    0.01 sec</span>
      Start <span class="token number">22</span>: recv_transmit
<span class="token number">21</span>/29 Test <span class="token comment">#22: recv_transmit ....................   Passed    0.23 sec</span>
      Start <span class="token number">23</span>: recv_window
<span class="token number">22</span>/29 Test <span class="token comment">#23: recv_window ......................   Passed    0.01 sec</span>
      Start <span class="token number">24</span>: recv_reorder
<span class="token number">23</span>/29 Test <span class="token comment">#24: recv_reorder .....................   Passed    0.01 sec</span>
      Start <span class="token number">25</span>: recv_reorder_more
<span class="token number">24</span>/29 Test <span class="token comment">#25: recv_reorder_more ................   Passed    0.66 sec</span>
      Start <span class="token number">26</span>: recv_close
<span class="token number">25</span>/29 Test <span class="token comment">#26: recv_close .......................   Passed    0.01 sec</span>
      Start <span class="token number">27</span>: recv_special
<span class="token number">26</span>/29 Test <span class="token comment">#27: recv_special .....................   Passed    0.02 sec</span>
      Start <span class="token number">37</span>: compile with optimization
<span class="token number">27</span>/29 Test <span class="token comment">#37: compile with optimization ........   Passed    0.74 sec</span>
      Start <span class="token number">38</span>: byte_stream_speed_test
             ByteStream throughput: <span class="token number">1.38</span> Gbit/s
<span class="token number">28</span>/29 Test <span class="token comment">#38: byte_stream_speed_test ...........   Passed    0.13 sec</span>
      Start <span class="token number">39</span>: reassembler_speed_test
             Reassembler throughput: <span class="token number">10.41</span> Gbit/s
<span class="token number">29</span>/29 Test <span class="token comment">#39: reassembler_speed_test ...........   Passed    0.15 sec</span>

<span class="token number">100</span>% tests passed, <span class="token number">0</span> tests failed out of <span class="token number">29</span>

Total Test <span class="token function">time</span> <span class="token punctuation">(</span>real<span class="token punctuation">)</span> <span class="token operator">=</span>   <span class="token number">5.39</span> sec
Built target check2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),l=[o];function i(u,r){return s(),a("div",null,l)}const d=n(c,[["render",i],["__file","cs144_lab2.html.vue"]]),m=JSON.parse('{"path":"/posts/cs144_lab2.html","title":"Stanford CS144 lab 2","lang":"en-US","frontmatter":{"category":["CS144 lab"],"tag":["Network"]},"headers":[{"level":3,"title":"wrap和unwrap的实现","slug":"wrap和unwrap的实现","link":"#wrap和unwrap的实现","children":[]},{"level":3,"title":"TCP receiver","slug":"tcp-receiver","link":"#tcp-receiver","children":[]}],"git":{"updatedTime":1712580408000,"contributors":[{"name":"Zari_Tsu","email":"zaritsu030907@gmail.com","commits":3}]},"filePathRelative":"posts/cs144_lab2.md","excerpt":"\\n<p>这个lab分为两个部分——wrap和unwrap，TCP receiver的实现<br>\\n回顾lab0和lab1，它们其实都是一个造积木的过程，而到了lab2当中，当然wrap和unwrap也还是在造积木。但到了TCPreceiver则开始搭积木了，它将之前我们所创建的几个小Class，通过调用其中的几个API给组合在了一起</p>\\n<h3>wrap和unwrap的实现</h3>\\n<ul>\\n<li>解释</li>\\n</ul>\\n<p>先来讲讲这两个函数的实现，而在这之前先让我们了解一下这三个概念</p>\\n<p>我先来自己解释一波:</p>\\n<ol>\\n<li>seqno(Sequence Numbers): 类型为Wrap32，实际里面的组成其实就是32位的一个数(如下)，能从32位的任何数(ISN)开始<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Wrap32</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">uint32_t</span> raw_number <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>abs seqno(Absolute Sequence Numbers): 类型是uint64_t，这个就是一个64位的数，始于0</li>\\n<li>stream index(Stream indices): 类型是uint64_t，其实就是我们之前reassembler里面的那个index</li>\\n</ol>"}');export{d as comp,m as data};
