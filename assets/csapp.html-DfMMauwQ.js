import{_ as e,o as t,c as i,e as o}from"./app-C1Lcb2T9.js";const n="/home/assets/img_1-6Rzl5k-P.png",r="/home/assets/img-CMv9MU6z.png",s="/home/assets/img_2-yAw5o7vY.png",a="/home/assets/img_3-CoGJKUmx.png",l="/home/assets/img_4-B62TO1Ie.png",m="/home/assets/img_5-DnL6I8bC.png",c="/home/assets/img_7-DhgrQsJd.png",g="/home/assets/img_8-1NY_dKwe.png",p="/home/assets/img_10-C5iGjiIi.png",d={},h=o('<h1 id="computer-science-a-programmer-s-perspective" tabindex="-1"><a class="header-anchor" href="#computer-science-a-programmer-s-perspective"><span>Computer Science: A Programmer&#39;s Perspective</span></a></h1><blockquote><p>这个是很久之前的关于csapp中计算机当中数的表示的笔记，图一乐即可</p></blockquote><h2 id="_1-a-tour-of-computer-systems" tabindex="-1"><a class="header-anchor" href="#_1-a-tour-of-computer-systems"><span>1. A Tour of Computer Systems</span></a></h2><p><em><strong>Abstractions in Computer Systems</strong></em><img src="'+n+'" alt="Some abstract conception in CS"></p><h3 id="hardware-organization-of-a-system" tabindex="-1"><a class="header-anchor" href="#hardware-organization-of-a-system"><span>Hardware Organization of a System</span></a></h3><ol><li>two continuous call may not adjacent</li><li><em><strong>word</strong></em>: per word, 32bit-machine -&gt; 4Byte, 64bit-machine -&gt; 8Byte</li><li><em><strong>Program Counter</strong></em></li><li><em><strong>Register File(寄存器)</strong></em></li><li><em><strong>Algorithm/Logical Unit</strong></em></li><li><em><strong>Main Memory(主存)</strong></em></li><li><em><strong>Bus(总线)</strong></em></li><li><em><strong>I/O devices</strong></em><img src="'+r+'" alt="hardware overview"> input by keyboard <img src="'+s+'" alt="input"> execution <img src="'+a+'" alt="execution"> output through graphic <img src="'+l+'" alt="output">{:height=&quot;50%&quot; width=&quot;50%&quot;}</li><li><strong>large -&gt; slow and cheap,<br>small -&gt; fast and cost <br> 上级层级是下级层级的高速缓存</strong><img src="'+m+'" alt="memory overview">{:height=&quot;50%&quot; width=&quot;50%&quot;}</li></ol><hr><h3 id="how-to-dramatically-improve-computer-performance" tabindex="-1"><a class="header-anchor" href="#how-to-dramatically-improve-computer-performance"><span>How to dramatically improve computer performance</span></a></h3><p><em><strong>Amdahl&#39;s law</strong></em> <code>s = 1 / ((1 - a) + a / k)</code> <br> which indicate we need to work a lot if we want to improve computer&#39;s performance.</p><ol><li><p><em><strong>Multi-core Processor(多核)</strong></em> : every CPU core has its L1 cache and L2 cache, all the cores share L3 cache.</p></li><li><p><em><strong>Hyperthreading(超线程)</strong></em> : Instruction-Level Parallelism(流水线作业) Single Instruction Multiple Data</p></li></ol><hr><h2 id="_2-representing-and-manipulating-information" tabindex="-1"><a class="header-anchor" href="#_2-representing-and-manipulating-information"><span>2. Representing and Manipulating Information</span></a></h2><h3 id="information-storage" tabindex="-1"><a class="header-anchor" href="#information-storage"><span>Information Storage</span></a></h3><ol><li><em><strong>Hexadecimal</strong></em>: start with <code>0x</code></li><li><em><strong>Decimal</strong></em></li><li><em><strong>Binary</strong></em></li><li><em><strong>the storage of different types</strong></em><img src="'+c+'" alt="the storage of different types"></li><li><em><strong>Addressing and Byte Ordering</strong></em>: mostly machines use <code>Litlle Endian</code><img src="'+g+'" alt="endian"></li></ol><h3 id="integer-representations" tabindex="-1"><a class="header-anchor" href="#integer-representations"><span>Integer Representations</span></a></h3><h4 id="representation-of-negatives" tabindex="-1"><a class="header-anchor" href="#representation-of-negatives"><span>Representation of negatives<br></span></a></h4><ol><li><p>Reverse Encoding(反码) : <strong>1&#39; s complement</strong>: flip every single bit<br> : 负数是正数二进制按位取反的结果<br> shortcoming: error in representation of 0</p></li><li><p>Complement Encoding(补码) : <strong>2&#39; s complement</strong>: flip every single bit and plus 1 : 最高位权重取负,其余与非负数表示相同。(最高位为1并不仅仅是取负号)<br> 如<code>1011 = -1*2^3 + 0*2^2 + 1*2^1 + 1*2^0</code></p></li><li><p>Bias complement(偏码) : 比较大小时类似unsigned,同位时直接比较大小,实际值为表达式值加上bias值 <code>bias = -(2 ^ (n-1) - 1)</code></p></li></ol><h3 id="integer-arithmetic" tabindex="-1"><a class="header-anchor" href="#integer-arithmetic"><span>Integer Arithmetic</span></a></h3><p><em><strong>if Overflow</strong></em></p><ol><li>unsigned number: if <code>x + y &gt; 2^w</code>, <code>x + y = x + y - 2^w</code></li><li>number:<br><ol><li><strong>positive</strong>   if <code>x + y &gt; 2^w</code>, <code>x + y = x + y - 2^(w+1)</code><br></li><li><strong>negative</strong>   if <code>x + y &lt; 2^w</code>, <code>x + y = x + y + 2^(w+1)</code><br></li></ol></li></ol><h3 id="floating-point" tabindex="-1"><a class="header-anchor" href="#floating-point"><span>Floating Point</span></a></h3><blockquote><ul><li>For normalized floats: <br> Value = (−1)^Sign ∗ 2^(Exp+Bias) ∗ 1.significand(2) <br></li><li>For denormalized(exponent all 0 and significand not all 0) floats: <br> Value = (−1)^Sign ∗ 2^(Exp+Bias+1) ∗ 0.significand(2) <br></li><li>Why exp need to be always 0? Cuz denorm is used to represent the numbers around 0. <br></li></ul></blockquote><ol><li><p>float (32bit = 4Byte)<br></p><ol><li>sign 符号位 1bit (31): (-1)^n. 0 -&gt; p, 1 -&gt; n.</li><li>exponent 指数位 8bit (30 - 23):</li></ol><blockquote><p>unsigned[0, 255] - bias(<code>(2 ^ (n-1) - 1)</code> = 127) <br><em><strong>scope: [-126, 127]</strong></em> (why not [-127, 128], 0000_0000, 1111_1111 represent infinite or NaN) <br> e.g. 1000_0001: (2^8 + 2^0) - 127</p></blockquote><ol start="3"><li>significand 小数位 23bit (22 - 0): <blockquote><p>for normal float: 1 is implicit, so there is 24 bit actually <br> store as big endian: e.g. <code>0100_0000...0000 = 2 ^ (-2)</code></p></blockquote></li></ol></li><li><p>double (64bit = 8Byte) <br></p><ol><li>sign 1bit (63)</li><li>exponent 11bit (62 - 52)</li><li>significand 53bit (52 - 0)</li></ol></li><li><p>representation <br><img src="'+p+'" alt="img_10.png"></p><ol><li>+0: sign = 0, e = s = 0000_0000</li><li>-0: sign = 1, e = s = 0000_0000</li><li>+infinity: sign = 0, e = 1111_1111, s = 0000_0000</li><li>-infinity: sign = 1, e = 1111_1111, s = 0000_0000</li><li>NaN(Not a Number): sign = 0/1, e = 1111_1111, s != 0</li></ol></li><li><p>transform</p></li></ol><blockquote><p>e.g. (10.75)10 to float</p><ol><li>represent as binary: <code>1010.11</code></li><li>Write binary numbers as 1.xxxx forms of scientific records: <code>1.01011*10^3</code></li><li>exponent + bias: <code>3+127 = 130</code> so the exponent bit is <code>1000_0010</code></li><li>significand: <code>0101_1000_0000_0000_0000_000</code></li><li>signal bit: <code>0</code>, for 10.75 is positive</li><li>get result: <code>10.75 = 0|1000_0010|0101_1000_0000_0000_0000_000</code></li></ol></blockquote>',24),u=[h];function f(b,_){return t(),i("div",null,u)}const w=e(d,[["render",f],["__file","csapp.html.vue"]]),v=JSON.parse(`{"path":"/posts/csapp.html","title":"Computer Science: A Programmer's Perspective","lang":"en-US","frontmatter":{"category":["计算机组成原理"],"tag":["CSAPP"]},"headers":[{"level":2,"title":"1. A Tour of Computer Systems","slug":"_1-a-tour-of-computer-systems","link":"#_1-a-tour-of-computer-systems","children":[{"level":3,"title":"Hardware Organization of a System","slug":"hardware-organization-of-a-system","link":"#hardware-organization-of-a-system","children":[]},{"level":3,"title":"How to dramatically improve computer performance","slug":"how-to-dramatically-improve-computer-performance","link":"#how-to-dramatically-improve-computer-performance","children":[]}]},{"level":2,"title":"2. Representing and Manipulating Information","slug":"_2-representing-and-manipulating-information","link":"#_2-representing-and-manipulating-information","children":[{"level":3,"title":"Information Storage","slug":"information-storage","link":"#information-storage","children":[]},{"level":3,"title":"Integer Representations","slug":"integer-representations","link":"#integer-representations","children":[]},{"level":3,"title":"Integer Arithmetic","slug":"integer-arithmetic","link":"#integer-arithmetic","children":[]},{"level":3,"title":"Floating Point","slug":"floating-point","link":"#floating-point","children":[]}]}],"git":{"updatedTime":1712736570000,"contributors":[{"name":"Zari_Tsu","email":"zaritsu030907@gmail.com","commits":1}]},"filePathRelative":"posts/csapp.md","excerpt":"\\n<blockquote>\\n<p>这个是很久之前的关于csapp中计算机当中数的表示的笔记，图一乐即可</p>\\n</blockquote>\\n<h2>1. A Tour of Computer Systems</h2>\\n<p><em><strong>Abstractions in Computer Systems</strong></em>\\n</p>\\n<h3>Hardware Organization of a System</h3>\\n<ol>\\n<li>two continuous call may not adjacent</li>\\n<li><em><strong>word</strong></em>: per word, 32bit-machine -&gt; 4Byte, 64bit-machine -&gt; 8Byte</li>\\n<li><em><strong>Program Counter</strong></em></li>\\n<li><em><strong>Register File(寄存器)</strong></em></li>\\n<li><em><strong>Algorithm/Logical Unit</strong></em></li>\\n<li><em><strong>Main Memory(主存)</strong></em></li>\\n<li><em><strong>Bus(总线)</strong></em></li>\\n<li><em><strong>I/O devices</strong></em>\\n\\ninput by keyboard\\n\\nexecution\\n\\noutput through graphic\\n{:height=\\"50%\\" width=\\"50%\\"}</li>\\n<li><strong>large -&gt; slow and cheap,<br>small -&gt; fast and cost <br>\\n上级层级是下级层级的高速缓存</strong>\\n{:height=\\"50%\\" width=\\"50%\\"}</li>\\n</ol>"}`);export{w as comp,v as data};
