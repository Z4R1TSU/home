import{_ as o,r as s,o as c,c as i,a as e,b as t,d as a,e as l}from"./app-Nu1stMhF.js";const p={},r=e("h1",{id:"std-atomic-原子操作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#std-atomic-原子操作"},[e("span",null,"std::atomic 原子操作")])],-1),d=e("p",null,"在我最近搞的线程池项目当中，有几个疑问。",-1),m=e("p",null,[t("Q：线程池的意义何在？"),e("br"),t(" A：因为线程的创建与销毁，或者线程的切换开销很大。所以我们可以创建一个“随时待命”的“兵团”来避免这种开销，也就有了线程池这个项目。")],-1),u=e("br",null,null,-1),h=e("p",null,[t("Q：既然线程需要通信，或者说避免对资源的竞争，那么有没有一种方式可以开销小一点的方法呢？比锁小一点的那种。"),e("br"),t(" A：有的。它就是atomic，原子操作。")],-1),_=e("p",null,"传送门:",-1),b={href:"https://en.cppreference.com/w/cpp/atomic/atomic",target:"_blank",rel:"noopener noreferrer"},v=e("strong",null,"atomic",-1),g=e("em",null,"cpp reference",-1),k={href:"https://learn.microsoft.com/zh-cn/cpp/standard-library/atomic?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},f=e("strong",null,"atomic",-1),x=e("em",null,"Microsoft Tutorial",-1),q=l(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>一个原子操作有两个关键属性，帮助你使用多个线程正确操控对象，而无需使用 <code>mutex</code> 锁。</p><ul><li><p>最直观的，“原子”指的是最小的、不可分割的。在多个线程访问同一个资源的时候，确保同一时间内只有一个线程在访问这一资源<br> (就很像锁不是吗，但是原子操作更加接近底层，因而效率更高)</p></li><li><p>由于原子操作是不可见的，因此，仅在第一个原子操作前后，来自不同线程同一对象上的第二个原子操作可以获取该对象的状态。</p></li><li><p>基于其 <code>memory_order</code> 参数，原子操作可以针对同一个线程中其他原子操作的影响可见性建立排序要求。 因此，它会抑制违反排序要求的编译器优化。</p></li></ul><br><p>可能有人有疑问了，比如对于这个例子</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>atomic_int cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
cnt <span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>明明对于原子类型<code>cnt</code>的操作是原子的，为什么还要用<code>std::atomic</code>呢？</p><p>因为虽然看上去<code>cnt ++</code>是一条单独的语句，不能再被分割，但是它在汇编和编译器层面上，涉及到多个操作，比如<code>cnt</code>的读取、写入、自增，这些操作也可能会引起竞争。</p><p>因此，为了保证<code>cnt</code>的原子性，我们需要用<code>std::atomic</code>来包装它。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><blockquote><p>原子操作是一种最小的不可分割的操作，它可以确保同一时间只有一个线程在访问某个资源。</p></blockquote><blockquote><p>一般用于程序计数和其他计数器，信号量，事件，条件变量等。</p></blockquote><p>我在项目当中，用到的atomic基本都是对一些变量或者数据结构的原子性封装。</p><ul><li>在多线程环境中，对std::atomic对象的访问不会造成竞争冒险。利用std::atomic可实现数据结构的无锁设计。</li></ul><p>比如</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>int     -&gt;  std::atomic_int
bool    -&gt;  std::atomic_bool
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>给一个使用的情景，大家可以推出atomic可以在什么时候使用</p><p>比如说，我这个线程池当中，池中内置了几个严阵以待的线程，等待着传入的任务。很自然的，我们想到使用queue队列来存储这个任务的集合，而任务的数量自然也是我们需要维护的一个变量。</p><p>但是，每一个线程都很有在同一时间对这个<code>taskSize_</code>进行修改操作。就很像那个<strong>cache coherence</strong>，也就是缓存一致性不是吗。</p><p>我们就可以利用对这个<code>taskSize_</code>加锁防止资源竞争。但是，锁又不够那么的轻量，所以进行原子封装，来确保同一时间只有一个线程在对它进行操作。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 记录任务的数量</span>
std<span class="token double-colon punctuation">::</span>atomic_uint taskSize_ <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="std-mutex" tabindex="-1"><a class="header-anchor" href="#std-mutex"><span>std::mutex</span></a></h2><p>再扯一下mutex互斥量，这个也很自然就能联想到，二者作用比较接近对吧。</p><blockquote><p>一句话解决：mutex是加大范围但效率变低的atomic。</p></blockquote><p>mutex可以保护的东西是一个变量，也可以是一段代码。(范围很广)</p>`,25);function S(z,T){const n=s("ExternalLinkIcon");return c(),i("div",null,[r,d,m,u,h,_,e("ol",null,[e("li",null,[e("a",b,[v,t(" in "),g,a(n)])]),e("li",null,[e("a",k,[f,t(" in "),x,a(n)])])]),q])}const w=o(p,[["render",S],["__file","std_atomic.html.vue"]]),y=JSON.parse('{"path":"/posts/std_atomic.html","title":"std::atomic 原子操作","lang":"en-US","frontmatter":{"category":["Cpp STL"],"tag":["Cpp"]},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"std::mutex","slug":"std-mutex","link":"#std-mutex","children":[]}],"git":{"updatedTime":1712998241000,"contributors":[{"name":"Zari_Tsu","email":"zaritsu030907@gmail.com","commits":1}]},"filePathRelative":"posts/std_atomic.md","excerpt":"\\n<p>在我最近搞的线程池项目当中，有几个疑问。</p>\\n<p>Q：线程池的意义何在？<br>\\nA：因为线程的创建与销毁，或者线程的切换开销很大。所以我们可以创建一个“随时待命”的“兵团”来避免这种开销，也就有了线程池这个项目。</p>\\n<br>\\n<p>Q：既然线程需要通信，或者说避免对资源的竞争，那么有没有一种方式可以开销小一点的方法呢？比锁小一点的那种。<br>\\nA：有的。它就是atomic，原子操作。</p>\\n<p>传送门:</p>\\n<ol>\\n<li><a href=\\"https://en.cppreference.com/w/cpp/atomic/atomic\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>atomic</strong> in <em>cpp reference</em></a></li>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/cpp/standard-library/atomic?view=msvc-170\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>atomic</strong> in <em>Microsoft Tutorial</em></a></li>\\n</ol>"}');export{w as comp,y as data};
