import{_ as e,r as p,o,c,a as n,b as a,d as t,e as l}from"./app-CK3Z8xlI.js";const i={},u=n("h1",{id:"std-thread",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#std-thread"},[n("span",null,"std::thread")])],-1),r=n("p",null,"C++的多线程绕不开C++-11当中的thread",-1),d=n("p",null,"传送门:",-1),k={href:"https://en.cppreference.com/w/cpp/thread/thread",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"thread",-1),m=n("em",null,"cpp reference",-1),h={href:"https://learn.microsoft.com/zh-cn/cpp/standard-library/thread?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"thread",-1),g=n("em",null,"Microsoft Tutorial",-1),f=l(`<h2 id="创建线程" tabindex="-1"><a class="header-anchor" href="#创建线程"><span>创建线程</span></a></h2><h3 id="创建一个无参函数线程" tabindex="-1"><a class="header-anchor" href="#创建一个无参函数线程"><span>创建一个无参函数线程</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用多线程来运行t1</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个含参函数线程" tabindex="-1"><a class="header-anchor" href="#创建一个含参函数线程"><span>创建一个含参函数线程</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用多线程来运行t1</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> （a <span class="token operator">=</span> <span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个类成员的含参函数线程" tabindex="-1"><a class="header-anchor" href="#创建一个类成员的含参函数线程"><span>创建一个类成员的含参函数线程</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">s</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s s1<span class="token punctuation">;</span>
    <span class="token comment">// 传参顺序：函数 类 参数</span>
    std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token double-colon punctuation">::</span>func<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="thread内部函数" tabindex="-1"><a class="header-anchor" href="#thread内部函数"><span>thread内部函数</span></a></h2><h3 id="get-id" tabindex="-1"><a class="header-anchor" href="#get-id"><span>get_id()</span></a></h3><p>线程存在着唯一标识符，而调用<code>get_id()</code>可以获取之。</p><p><code>int this_thread_id = std::this_thread::get_id();</code></p><h3 id="hardware-concurrency" tabindex="-1"><a class="header-anchor" href="#hardware-concurrency"><span>hardware_concurrency()</span></a></h3><p>可能有同学会疑惑，比如一个线程池，我们准备几个线程到线程池中合适呢？</p><p>答：一般几核CPU开几线程。</p><p>而获取核心数的办法是<code>std::thread::hardware_concurrency()</code></p><h3 id="join-重点" tabindex="-1"><a class="header-anchor" href="#join-重点"><span>join() (重点)</span></a></h3><p>等待线程，直到它执行完毕</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span>     <span class="token comment">// for print</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span>       <span class="token comment">// for thread class</span></span>

std<span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">thread</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;done&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="detach-重点" tabindex="-1"><a class="header-anchor" href="#detach-重点"><span>detach() (重点)</span></a></h3><blockquote><p>将线程分离（detach）操作的目的是使线程在后台运行，使得其执行变得独立，即允许线程在没有其他线程明确等待其完成的情况下结束。分离线程不会与创建它的线程同步，这意味着一旦分离，主线程将不再等待分离线程的结束。</p></blockquote><p>分离线程，在后台运行线程</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono&gt;</span>       <span class="token comment">// chrono这个库是用于调用与时间相关的函数</span></span>

std<span class="token double-colon punctuation">::</span>thread <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
t1<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;done&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token comment">// 确保主线程给予这个detach的t1足够的时间来完全输出</span>
<span class="token comment">// 因为可能主线程已经完成了操作，而t1尚未运行完毕，导致t1被主线程的完成而强行中断，无法看到有效输出</span>
std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出为</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">done</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,26);function _(y,w){const s=p("ExternalLinkIcon");return o(),c("div",null,[u,r,d,n("ol",null,[n("li",null,[n("a",k,[v,a(" in "),m,t(s)])]),n("li",null,[n("a",h,[b,a(" in "),g,t(s)])])]),f])}const j=e(i,[["render",_],["__file","std_thread.html.vue"]]),q=JSON.parse('{"path":"/posts/std_thread.html","title":"std::thread","lang":"en-US","frontmatter":{"category":["Cpp STL"],"tag":["Cpp"]},"headers":[{"level":2,"title":"创建线程","slug":"创建线程","link":"#创建线程","children":[{"level":3,"title":"创建一个无参函数线程","slug":"创建一个无参函数线程","link":"#创建一个无参函数线程","children":[]},{"level":3,"title":"创建一个含参函数线程","slug":"创建一个含参函数线程","link":"#创建一个含参函数线程","children":[]},{"level":3,"title":"创建一个类成员的含参函数线程","slug":"创建一个类成员的含参函数线程","link":"#创建一个类成员的含参函数线程","children":[]}]},{"level":2,"title":"thread内部函数","slug":"thread内部函数","link":"#thread内部函数","children":[{"level":3,"title":"get_id()","slug":"get-id","link":"#get-id","children":[]},{"level":3,"title":"hardware_concurrency()","slug":"hardware-concurrency","link":"#hardware-concurrency","children":[]},{"level":3,"title":"join() (重点)","slug":"join-重点","link":"#join-重点","children":[]},{"level":3,"title":"detach() (重点)","slug":"detach-重点","link":"#detach-重点","children":[]}]}],"git":{"updatedTime":1712998241000,"contributors":[{"name":"Zari_Tsu","email":"zaritsu030907@gmail.com","commits":1}]},"filePathRelative":"posts/std_thread.md","excerpt":"\\n<p>C++的多线程绕不开C++-11当中的thread</p>\\n<p>传送门:</p>\\n<ol>\\n<li><a href=\\"https://en.cppreference.com/w/cpp/thread/thread\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>thread</strong> in <em>cpp reference</em></a></li>\\n<li><a href=\\"https://learn.microsoft.com/zh-cn/cpp/standard-library/thread?view=msvc-170\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>thread</strong> in <em>Microsoft Tutorial</em></a></li>\\n</ol>"}');export{j as comp,q as data};
