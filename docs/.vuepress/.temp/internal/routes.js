export const redirects = JSON.parse("{}")

export const routes = Object.fromEntries([
  ["/get-started.html", { loader: () => import(/* webpackChunkName: "get-started.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/get-started.html.js"), meta: {"title":"Get Started"} }],
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/index.html.js"), meta: {"title":"Home"} }],
  ["/posts/cs144_lab0.html", { loader: () => import(/* webpackChunkName: "cs144_lab0.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/cs144_lab0.html.js"), meta: {"_blog":{"title":"Stanford CS144  lab 0","author":"","date":null,"category":["CS144 lab"],"tag":["Network"],"excerpt":"\n<p><a href=\"https://www.bilibili.com/video/BV1pM4m197ma/?spm_id_from=333.999.0.0&amp;vd_source=f53099189814dd887f4ab25638e07406\" target=\"_blank\" rel=\"noopener noreferrer\">视频讲解</a></p>\n<h3>webget</h3>\n<ul>\n<li>我的解法</li>\n</ul>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">get_URL</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  TCPSocket sock<span class=\"token punctuation\">;</span>\n  sock<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token function\">Address</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  sock<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET \"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\" HTTP/1.1\\r\\nHost: \"</span> <span class=\"token operator\">+</span> host <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\nConnection: close\\r\\n\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sock<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string recvd<span class=\"token punctuation\">;</span>\n    sock<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>recvd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> recvd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  sock<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sock<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span>SHUT_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"},"title":"Stanford CS144  lab 0"} }],
  ["/posts/cs144_lab2.html", { loader: () => import(/* webpackChunkName: "cs144_lab2.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/cs144_lab2.html.js"), meta: {"_blog":{"title":"Stanford CS144 lab 2","author":"","date":null,"category":["CS144 lab"],"tag":["Network"],"excerpt":"\n<p>这个lab分为两个部分——wrap和unwrap，TCP receiver的实现<br>\n回顾lab0和lab1，它们其实都是一个造积木的过程，而到了lab2当中，当然wrap和unwrap也还是在造积木。但到了TCPreceiver则开始搭积木了，它将之前我们所创建的几个小Class，通过调用其中的几个API给组合在了一起</p>\n<h3>wrap和unwrap的实现</h3>\n<ul>\n<li>解释</li>\n</ul>\n<p>先来讲讲这两个函数的实现，而在这之前先让我们了解一下这三个概念</p>\n<p>我先来自己解释一波:</p>\n<ol>\n<li>seqno(Sequence Numbers): 类型为Wrap32，实际里面的组成其实就是32位的一个数(如下)，能从32位的任何数(ISN)开始<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Wrap32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">uint32_t</span> raw_number <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>abs seqno(Absolute Sequence Numbers): 类型是uint64_t，这个就是一个64位的数，始于0</li>\n<li>stream index(Stream indices): 类型是uint64_t，其实就是我们之前reassembler里面的那个index</li>\n</ol>"},"title":"Stanford CS144 lab 2"} }],
  ["/posts/RAII.html", { loader: () => import(/* webpackChunkName: "RAII.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/RAII.html.js"), meta: {"_blog":{"title":"对象生存期与资源管理","author":"","date":null,"category":["Cpp STL"],"tag":["Cpp"],"excerpt":"\n<blockquote>\n<p>引: c++不像Java或是Python拥有自动的回收处理机制</p>\n</blockquote>\n<p>这篇来讲讲cpp当中的智能指针，正如引子讲的那样，c或c类语言基本都没一种自动的回收机制，这也是出现什么野指针、空悬指针、内存泄漏等等tricky bug的原因。</p>\n<p>在c当中确确实实就只能通过很小心翼翼的设计才能避免这个问题，但是在c++当中引入的RAII可以一定程度的解决这个问题。</p>\n<p>先推荐一篇<a href=\"https://learn.microsoft.com/zh-cn/cpp/cpp/object-lifetime-and-resource-management-modern-cpp?view=msvc-170\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft的官方文档</a>，讲的非常好</p>"},"title":"对象生存期与资源管理"} }],
  ["/posts/std_move.html", { loader: () => import(/* webpackChunkName: "std_move.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/std_move.html.js"), meta: {"_blog":{"title":"std::move","author":"","date":null,"category":["Cpp STL"],"tag":["Cpp"],"excerpt":"\n<h3>左值和右值</h3>\n<ol>\n<li>左值: 赋值表达式结束后仍然存在的持久对象</li>\n<li>右值: 赋值表达式用完即丢的临时对象</li>\n</ol>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里n是左值，1是右值，n在赋值完还会继续存在，但是1就会消失</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里就是一个错误的语法，值从右传递到左，1在分配后就会被移除</span>\n</code></pre></div>"},"title":"std::move"} }],
  ["/posts/virtual.html", { loader: () => import(/* webpackChunkName: "virtual.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/virtual.html.js"), meta: {"_blog":{"title":"虚函数","author":"","date":null,"category":["Cpp STL"],"tag":["Cpp"],"excerpt":"\n<ul>\n<li>\n<p>虚函数</p>\n</li>\n<li>\n<p>构造函数(constructor)</p>\n</li>\n<li>\n<p>析构函数(deconstructor)</p>\n</li>\n</ul>\n"},"title":"虚函数"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/404.html.js"), meta: {"title":""} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/category/index.html.js"), meta: {"title":"Categories"} }],
  ["/category/cs144-lab/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/category/cs144-lab/index.html.js"), meta: {"title":"Category CS144 lab"} }],
  ["/category/cpp-stl/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/category/cpp-stl/index.html.js"), meta: {"title":"Category Cpp STL"} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/tag/index.html.js"), meta: {"title":"Tags"} }],
  ["/tag/network/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/tag/network/index.html.js"), meta: {"title":"Tag Network"} }],
  ["/tag/cpp/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/tag/cpp/index.html.js"), meta: {"title":"Tag Cpp"} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/article/index.html.js"), meta: {"title":"Articles"} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "index.html" */"E:/web/vuepress-starter/docs/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"title":"Timeline"} }],
]);
