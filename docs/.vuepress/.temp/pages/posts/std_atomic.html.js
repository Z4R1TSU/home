import comp from "E:/web/vuepress-starter/docs/.vuepress/.temp/pages/posts/std_atomic.html.vue"
const data = JSON.parse("{\"path\":\"/posts/std_atomic.html\",\"title\":\"std::atomic 原子操作\",\"lang\":\"en-US\",\"frontmatter\":{\"category\":[\"Cpp STL\"],\"tag\":[\"Cpp\"]},\"headers\":[{\"level\":2,\"title\":\"作用\",\"slug\":\"作用\",\"link\":\"#作用\",\"children\":[]},{\"level\":2,\"title\":\"使用\",\"slug\":\"使用\",\"link\":\"#使用\",\"children\":[]},{\"level\":2,\"title\":\"std::mutex\",\"slug\":\"std-mutex\",\"link\":\"#std-mutex\",\"children\":[]}],\"git\":{\"updatedTime\":1712998241000,\"contributors\":[{\"name\":\"Zari_Tsu\",\"email\":\"zaritsu030907@gmail.com\",\"commits\":1}]},\"filePathRelative\":\"posts/std_atomic.md\",\"excerpt\":\"\\n<p>在我最近搞的线程池项目当中，有几个疑问。</p>\\n<p>Q：线程池的意义何在？<br>\\nA：因为线程的创建与销毁，或者线程的切换开销很大。所以我们可以创建一个“随时待命”的“兵团”来避免这种开销，也就有了线程池这个项目。</p>\\n<br>\\n<p>Q：既然线程需要通信，或者说避免对资源的竞争，那么有没有一种方式可以开销小一点的方法呢？比锁小一点的那种。<br>\\nA：有的。它就是atomic，原子操作。</p>\\n<p>传送门:</p>\\n<ol>\\n<li><a href=\\\"https://en.cppreference.com/w/cpp/atomic/atomic\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><strong>atomic</strong> in <em>cpp reference</em></a></li>\\n<li><a href=\\\"https://learn.microsoft.com/zh-cn/cpp/standard-library/atomic?view=msvc-170\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"><strong>atomic</strong> in <em>Microsoft Tutorial</em></a></li>\\n</ol>\"}")
export { comp, data }
