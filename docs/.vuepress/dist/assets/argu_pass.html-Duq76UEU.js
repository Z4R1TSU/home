import{_ as n,o as s,c as a,e as p}from"./app-BbR8rnxk.js";const e={},t=p(`<h1 id="函数的参数传递" tabindex="-1"><a class="header-anchor" href="#函数的参数传递"><span>函数的参数传递</span></a></h1><h3 id="passing-by-value" tabindex="-1"><a class="header-anchor" href="#passing-by-value"><span>passing by value</span></a></h3><ul><li>这里传进去的其实是参数的一个copy，而不是参数本身，或者说是参数所对应的地址</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fa <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里如果打印a的值，毋庸置疑还是1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="passing-by-pointer" tabindex="-1"><a class="header-anchor" href="#passing-by-pointer"><span>passing by pointer</span></a></h3><ul><li>这个应该是很常见的</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 传入的参数是一个地址</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 传入a的地址，fa就是一个指向a的指针，也就是说fa的值就是a的地址</span>
    <span class="token operator">*</span>fa <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里打印a的值会变成5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="passing-by-reference" tabindex="-1"><a class="header-anchor" href="#passing-by-reference"><span>passing by reference</span></a></h3><ul><li>先讲一下C++当中的reference，也就是引用。</li></ul><p>它有几个特点:</p><ol><li>可以将其理解成一个变量的别名</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> original <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>ref <span class="token operator">=</span> original<span class="token punctuation">;</span> <span class="token comment">// ref现在是原始变量的引用</span>
ref <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// 改变引用将改变原始变量original的值</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> original<span class="token punctuation">;</span> <span class="token comment">// 输出200，证明original的值被改变了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>引用在定义时必须初始化，一旦与某个变量绑定，就无法再绑定到其它变量</p></li><li><p>引用在函数传参时尤其有用，因为它可以避免通过指针传参时可能发生的间接访问和解引用操作</p></li><li><p>引用在C++中提供了一种安全、便捷的替代指针的方式，尤其在函数传参、返回值和操作符重载时更能看到它的优势</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>fa<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里传入的fa其实就是a本身，fa就是a的一个别名而已，二者是同一块内存空间</span>
    fa <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里能改变a的值，打印结果为5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),c=[t];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","argu_pass.html.vue"]]),d=JSON.parse('{"path":"/posts/argu_pass.html","title":"函数的参数传递","lang":"en-US","frontmatter":{"category":["Cpp STL"],"tag":["Cpp"]},"headers":[{"level":3,"title":"passing by value","slug":"passing-by-value","link":"#passing-by-value","children":[]},{"level":3,"title":"passing by pointer","slug":"passing-by-pointer","link":"#passing-by-pointer","children":[]},{"level":3,"title":"passing by reference","slug":"passing-by-reference","link":"#passing-by-reference","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"posts/argu_pass.md","excerpt":"\\n<h3>passing by value</h3>\\n<ul>\\n<li>这里传进去的其实是参数的一个copy，而不是参数本身，或者说是参数所对应的地址</li>\\n</ul>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> fa<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    fa <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 这里如果打印a的值，毋庸置疑还是1</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{r as comp,d as data};
