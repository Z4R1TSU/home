import{_ as n,o as s,c as a,e}from"./app-C1Lcb2T9.js";const t={},p=e(`<h1 id="const" tabindex="-1"><a class="header-anchor" href="#const"><span>const</span></a></h1><p>讲讲C++当中<strong>const</strong>这个修饰符啊</p><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h3><p>const全称constant，就是常量的意思。一般来说，用于修饰一些不变的量。</p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h3><p>先来聊聊比较重要的一个，const到底怎么看，它修饰的对象是谁？</p><blockquote><p>有一个one-fit-all的万能公式:<br><strong>先看左边，再看右边</strong></p></blockquote><p>也就是说，const默认修饰它左边的东西，如果它的左边没有任何东西就修饰它右边的东西。</p><p>举几个例子:</p><ol><li><code>const int i</code> 在这个例子当中因为const的左边啥也没有，所以它指向了它右边的int，也就是说这个i变量是一个const int类型。</li><li><code>int* const i</code> 那么这里就修饰了它的左边，即这个指针。也就是说这个i变量是一个const的int指针，我们不能改变这个指针的指向。</li></ol><h3 id="要点" tabindex="-1"><a class="header-anchor" href="#要点"><span>要点</span></a></h3><p>有几个要注意的点:</p><ol><li><p>const修饰变量:</p><ol><li><p>若一个变量被修饰为const时，我们必须得在声明它的当时就直接对它进行分配赋值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 错误</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 正确</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一个非const变量可以被赋值为const，反之则不行。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 错误</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>pj <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
<span class="token comment">// 因为如果我这里对pj进行修改，就违反了i是const无法被改变的事实</span>
<span class="token comment">// 比如下列就相当于通过pj改变了i的值</span>
<span class="token operator">*</span>pj <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 正确</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> pi <span class="token operator">=</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对于第二点，有一个比较tricky的点，特此提一下。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 这一步毋庸置疑是对的，const指向另一个const</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
<span class="token comment">// 而这一步就显得有点争议了...</span>
pi <span class="token operator">=</span> <span class="token operator">&amp;</span>j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就要从const修饰的对象开始讲起了，先看左再看右，我们可以发现对于pi而言，它是一个指向const int的指针。所以pi的值是<strong>可以</strong>变化的，而且，不但可以指向cosnt int，甚至可以指向一个int，因为第二点说明了const可以是一个非const。</p></li></ol></li><li><p>const修饰函数: 一般来说在const修饰函数的过程会有三个常见的位置。</p><ol><li><p>const int function (int n) {}; :<br> 这里的情况代表了这个函数的返回值是一个const int，应该很好理解。</p></li><li><p>int function (const int n) {}; :<br> 这里的话就代表写入的这个参数n，我们在function()这个函数的实现当中，我们不能改变这个n，即使n它是一个非const。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 正确</span>

<span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里不能修改n，比如n ++的这类操作是不被允许的</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>int function (int n) const {}; :<br> 这个情况设计到了OOP，即Class这些面向对象的知识。<br> 当在类成员函数的声明和定义中的函数名后面加上const关键字，表明这个函数不会修改任何类成员变量，即使那些成员变量并没有被声明为const。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里不能修改类的任何非const成员变量</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment">// 注意这里返回值不会被const修饰</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><p>那么const除了防止我们改变它，还有其他的什么作用呢？</p><ol><li>类似于我们要尽量把Class当中的属性设高私密级，比如能用<code>private</code>就不用<code>protected</code>，能用<code>protected</code>就不用<code>public</code>，是一种符合安全性、规范性的写法。</li><li>使用const，可以使得我们的运行速度变快，因为运行的时候就不用想着“哎，这个变量要不要对它发生变化啊”诸如此类的疑问，所以速度会变快。</li></ol><p><s>这种作用一般不是我的强项，举不出来几个...太公式了，跟背书文科一样...大家应该能get到就行</s></p>`,17),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","const.html.vue"]]),u=JSON.parse('{"path":"/posts/const.html","title":"const","lang":"en-US","frontmatter":{"category":["Cpp STL"],"tag":["Cpp"]},"headers":[{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"要点","slug":"要点","link":"#要点","children":[]},{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]}],"git":{"updatedTime":1712656291000,"contributors":[{"name":"Zari_Tsu","email":"zaritsu030907@gmail.com","commits":1}]},"filePathRelative":"posts/const.md","excerpt":"\\n<p>讲讲C++当中<strong>const</strong>这个修饰符啊</p>\\n<h3>解释</h3>\\n<p>const全称constant，就是常量的意思。一般来说，用于修饰一些不变的量。</p>\\n<h3>对象</h3>\\n<p>先来聊聊比较重要的一个，const到底怎么看，它修饰的对象是谁？</p>\\n<blockquote>\\n<p>有一个one-fit-all的万能公式:<br>\\n<strong>先看左边，再看右边</strong></p>\\n</blockquote>\\n<p>也就是说，const默认修饰它左边的东西，如果它的左边没有任何东西就修饰它右边的东西。</p>\\n<p>举几个例子:</p>"}');export{r as comp,u as data};
